import requests, urllib, gzip, json, os
from datetime import datetime
from celery.task import task
from heat_map.models import User, Location

login = 'robforsythe'

# take input array, get login
# from login, get location
# from location, reverse geocode & get coords
### we don't need the location call to github here, it 
### is part of the event call - is ID necessary?
@task(name='tasks.parse')
def parse():
  # returns [year, month, day, hour]
  time = getDate()

  GHlink = 'http://data.githubarchive.org/{0}-{1}-{2}-{3}.json.gz'
  url = GHlink.format(time[0], time[1], time[2], time[3])
  arr = fetch(url)

  link = 'https://api.github.com/users/{0}'
  newUsers = []

  for elt in arr:
    print elt
    uname = elt['actor_attributes']['login']

    try:
      User.objects.get(name=uname)
    except User.DoesNotExist:
      r = requests.get(link.format(uname), auth=(login, authToken))
      remaining = int(r.headers["x-ratelimit-remaining"])

      if remaining == 0:
        return None
      
      data = r.json()

      if data["type"] == "User":
        uid = int(data["id"])
        if 'location' in data and data["location"] != "null" and data['location'] != None:
          loc = data['location']
        else:
          # placeholder
          loc = 'Antarctica' 

          # returns { staticLocation, latitude, longitude }
        staticLoc = getLocation(loc)
        u = User(uid=uid, name=uname, location=staticLoc)
        newUsers.append(u)

  User.objects.bulk_create(newUsers)


def getDate():
  yr = str(datetime.now().year)
  mo = str(datetime.now().month)
  if len(mo) != 2:
    mo = '0' + mo
  day = str(datetime.now().day - 1)
  if len(day) != 2:
    day = '0' + day
  hr = str(datetime.now().hour)

  return [yr, mo, day, hr]

# returns arr of json elements
def fetch(url):
  #print url
  fname = url.split('/')[-1]
  urllib.urlretrieve(url, fname)
  content = gzip.open(fname).read()

  jsons = []
  arr = content.splitlines()
  for e in arr:
    jsons.append(json.loads(e))

  return jsons

# using the location that the user input
# need to get a static location name in addition to the coordinates
# any invalid locations or null fields get sent to Antarctica
def getLocation(userInputLoc):
  lat_long = {}
  userInputLoc.replace(' ', '+')
  link = 'http://maps.googleapis.com/maps/api/geocode/json?sensor=false&{}' 
  url = link.format(urllib.urlencode({'address':userInputLoc.encode('utf-8')}))
  r = requests.get(url)

  # this will include lat and lng
  results = r.json()['results']
  
  if len(results) != 0: # address validity check
    coords = results[0]['geometry']['location']
    pos = {'lat': coords['lat'], 'lng': coords['lng'] }
  else:
    # placeholder
    pos = {'lat': '90.0000', 'lng': '0.0000'}

  link = 'http://maps.googleapis.com/maps/api/geocode/json?latlng={0},{1}&sensor=false'
  r = requests.get(link.format(pos['lat'], pos['lng']))
  geoInfo = r.json()
  potentialAddresses = geoInfo['results'][0]['address_components']
  if len(potentialAddresses) != 0:
    staticLoc = geoInfo['results'][0]['address_components'][0]
    name = staticLoc['long_name']
  else:
    name = 'Antarctica'

  try:
    l = Location.objects.get(location=name)
  except Location.DoesNotExist:
    l = Location(location=name, lat=pos['lat'], lng=pos['lng'])
    l.save()

  return l
